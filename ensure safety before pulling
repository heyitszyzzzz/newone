<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Story of the Ring</title>
    
    <!-- Load React, Babel, and Tailwind CSS from CDNs -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;700&display=swap" rel="stylesheet">
    
    <!-- Custom Styles -->
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #000; }
        .font-sans { font-family: 'Inter', sans-serif; }
        .animate-fade-in { animation: fadeIn 1.5s ease-in-out; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
        @keyframes pulse-slow { 50% { opacity: .7; } }
        .animate-pulse-slow { animation: pulse-slow 3s cubic-bezier(0.4, 0, 0.6, 1) infinite; }
        @keyframes pulse-strong { 50% { opacity: .3; } }
        .animate-pulse-strong { animation: pulse-strong 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }
        @keyframes drift {
          from { transform: translateY(0px) translateX(0px); opacity: 0; }
          50% { opacity: 0.7; }
          to { transform: translateY(-1000px) translateX(0px); opacity: 0; }
        }
        .story-container { scrollbar-width: none; }
        .story-container::-webkit-scrollbar { display: none; }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useRef, useCallback } = React;

        // --- Particle Component for Background Effect ---
        const Starfield = () => {
          const [particles, setParticles] = useState([]);
          useEffect(() => {
            const newParticles = Array.from({ length: 50 }).map(() => ({
              id: Math.random(),
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDuration: `${Math.random() * 30 + 20}s`,
              animationDelay: `-${Math.random() * 50}s`,
              width: `${Math.floor(Math.random() * 2) + 1}px`,
              height: `${Math.floor(Math.random() * 2) + 1}px`,
            }));
            setParticles(newParticles);
          }, []);
          return (
            <div className="absolute top-0 left-0 w-full h-full overflow-hidden z-0">
              {particles.map(p => (
                <div key={p.id} className="absolute rounded-full bg-amber-200/50" style={{
                    left: p.left, top: p.top, width: p.width, height: p.height, 
                    animation: `drift ${p.animationDuration} ${p.animationDelay} linear infinite`
                }} />
              ))}
            </div>
          );
        };
        
        // --- Story Data ---
        const storyChapters = [
          {
            title: "The Ring",
            image: "https://i.imgur.com/rX39s6N.jpeg",
            alt: "A man's hand wearing a silver ring with a square blue Lapis Lazuli stone.",
            body: [
              "Let's be real. Hours after my mum passed, my head was a mess. Numb. In that chaos, for no reason at all, I started going through her stuff. My hand just found this ring. Didn't even really look at it.",
              "I was on the phone, distracted, tried putting it on. Wouldn't fit my index finger. Wouldn't fit my middle. My hands were full, so I got my cousin to stick it on the only one it fit. The wedding finger.",
              "I didn't choose that. The ring did. It was a physical thing. It was like it knew where it was supposed to go."
            ]
          },
          {
            title: "The Connection",
            icon: (
              <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 256 256" fill="currentColor" className="text-amber-300">
                <path d="M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24Zm0,192a88,88,0,1,1,88-88A88.1,88.1,0,0,1,128,216ZM128,72a44,44,0,0,0-44,44,8,8,0,0,0,16,0,28,28,0,0,1,56,0,8,8,0,0,0,16,0A44,44,0,0,0,128,72Zm-8,88H120a8,8,0,0,0-8,8v40a8,8,0,0,0,16,0V176h8a8,8,0,0,0,0-16Z"/>
              </svg>
            ),
            body: [
              "Then it gets weirder. I've always been into Egyptian mythology. It's not just a phase; it's a core part of my identity. So when I found out the stone in the ring was Lapis Lazuli, the exact same stone the Egyptians were obsessed with, it felt significant.",
              "They thought it was a piece of the sky, a guide for souls in the afterlife. So, a stone that's part of my own personal mythology just shows up in my mum's things. The odds of that are mad."
            ]
          },
          {
            title: "The Prophecy on Skin",
            type: 'gallery',
            body: [
                "And when I say it's a part of my identity, I mean it's literally written on my skin. This isn't just an interest; it's a story I've been carrying for years, across different mythologies. Here's the proof."
            ],
            images: [
                {
                    src: "https://i.ibb.co/68v8z9k/6-D3-FBB9-A-0-D1-F-44-ED-9474-7-ABE5-E859-DEB.jpg",
                    alt: "Tattoo of Anubis, the Eye of Horus, and a pyramid on a forearm."
                },
                {
                    src: "https://i.ibb.co/wJdGBC6/1-BC6-B0-E9-1123-49-D5-97-F1-5-A8997-EF0-B10.jpg",
                    alt: "Tattoo of Pharaoh Tutankhamun on an arm."
                },
                {
                    src: "https://i.ibb.co/hM1BJZc/58471-BF1-1-C19-4-CCA-BBFE-5-DCBFBD9-B363.jpg",
                    alt: "Tattoo of the Gates of Heaven with stairs on a leg."
                }
            ]
          },
            {
            title: "The Soundtrack",
            icon: (
               <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 256 256" fill="currentColor" className="text-amber-300">
                <path d="M213.66,82.34l-56-56A8,8,0,0,0,152,24H56A16,16,0,0,0,40,40V216a16,16,0,0,0,16,16H200a16,16,0,0,0,16-16V88A8,8,0,0,0,213.66,82.34ZM160,51.31,188.69,80H160ZM200,216H56V40h88V88a8,8,0,0,0,8,8h48V216Z"/>
               </svg>
            ),
            body: [
                "Then the outside world started confirming it. My own playlist served up a raw, biographical song about a son's sacrifice for his immigrant motherâ€”ending with his real mum's voice.",
                "Another track, about a fire burning so hot it only leaves pure 'white ash,' became real too. The ash from my rollies on the table was a constant reminder of my own trial by fire.",
                "The proof? I went to find a track online, and the comment count was at 444. The same number I have tattooed on my neck. That's not a coincidence. That's the universe making a point you can't ignore."
            ]
          },
            {
            title: "The Grind",
            icon: (
                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 256 256" fill="currentColor" className="text-amber-300">
                  <path d="M244.27,148.6l-33-99.06a16,16,0,0,0-15.1-11.54H59.83a16,16,0,0,0-15.1,11.54l-33,99.06a16,16,0,0,0,5.73,18.07,16.08,16.08,0,0,0,18.14,1.33L72,150.4V208a16,16,0,0,0,16,16h80a16,16,0,0,0,16-16V150.4l36.37,17.6a16.08,16.08,0,0,0,18.14-1.33A16,16,0,0,0,244.27,148.6ZM168,208H88V144h80Zm47-66.4-39-18.92V144a16,16,0,0,0-16-16H96a16,16,0,0,0-16,16v-21.32l-39-18.92L64.2,56h127.6Z"></path>
                </svg>
            ),
            body: [
              "None of this makes sense without the backstory. My one mission was to retire my mum. I moved back to Brazil from Edinburgh, juggling UK clients, a fucked-up time difference, and undiagnosed ADHD.",
              "To cope, I got hooked on coke. It was cheaper than a pack of fags in the UK. I was working 48-hour stretches. Not a typo. Forty-eight hours straight, forcing myself to stay up through hallucinations to keep my clients and keep the money coming in for her.",
              "This wasn't a 9-to-5. This was a war. A relentless, body-destroying grind fuelled by love."
            ]
          },
          {
            title: "The Reset",
            icon: (
               <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 78.97 48" fill="none" className="text-amber-300">
                    <path d="M78.03 24C78.03 24 60.58 47.03 39.5 47.03C18.42 47.03 0.97 24 0.97 24C0.97 24 18.42 0.97 39.5 0.97C60.58 0.97 78.03 24 78.03 24Z" stroke="currentColor" stroke-width="3" stroke-miterlimit="10"></path>
                    <path d="M59.13 24C59.13 34.84 49.97 43.6 39.5 43.6C29.03 43.6 19.87 34.84 19.87 24C19.87 13.16 29.03 4.4 39.5 4.4C49.97 4.4 59.13 13.16 59.13 24Z" stroke="currentColor" stroke-width="3" stroke-miterlimit="10"></path>
                    <circle cx="39.5" cy="24" r="7.25" fill="currentColor"></circle>
                </svg>
            ),
            body: [
              "Months before she passed, my body gave up. A massive overdose. I remember my vision just... switching off. A feeling of total peace, accepting it was over. Then, I blinked back into existence on a public toilet floor.",
              "I couldn't walk. I had to crawl out. A doctor from a nearby clinic found me. Mid-respiratory failure, I was just shouting out antidotes I somehow knew: 'Coke... OD... Propranolol... Diazepam!'",
              "He came back with one thing. Diazepam. The one drug that could save me. A one-in-a-million shot. I walked away with no brain damage. I was given a second chance, a hard reset, for a reason. This ring is the reminder."
            ]
          },
          {
            title: "A Message From The Stars",
            type: "interactive",
            icon: (
                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 256 256" fill="currentColor" className="text-amber-300">
                    <path d="M228,128a12,12,0,0,1-12,12H183.13l-16.64,38.28a12,12,0,0,1-21.92-9.52L156,140H100l-11.43,28.76a12,12,0,0,1-21.92-9.52L84.87,140H40a12,12,0,0,1,0-24h44.87l11.43-28.76a12,12,0,0,1,21.92,9.52L108,116h56l11.43-28.76a12,12,0,0,1,21.92,9.52L183.13,116H216A12,12,0,0,1,228,128Z"></path>
                </svg>
            ),
            body: []
          }
        ];

        // --- Eye of Horus Loader ---
        const EyeOfHorusLoader = () => (
            <div className="flex justify-center items-center h-20">
                <svg width="60" height="60" viewBox="0 0 79 48" className="animate-pulse-strong">
                    <path d="M78.03 24C78.03 24 60.58 47.03 39.5 47.03C18.42 47.03 0.97 24 0.97 24C0.97 24 18.42 0.97 39.5 0.97C60.58 0.97 78.03 24 78.03 24Z" stroke="#FBBF24" strokeWidth="2" strokeMiterlimit="10"></path>
                    <path d="M59.13 24C59.13 34.84 49.97 43.6 39.5 43.6C29.03 43.6 19.87 34.84 19.87 24C19.87 13.16 29.03 4.4 39.5 4.4C49.97 4.4 59.13 13.16 59.13 24Z" stroke="#FBBF24" strokeWidth="2" strokeMiterlimit="10"></path>
                    <circle cx="39.5" cy="24" r="7.25" fill="#FBBF24"></circle>
                </svg>
            </div>
        );

        // --- Typing Effect Hook ---
        const useTypingEffect = (text, speed = 30) => {
            const [displayedText, setDisplayedText] = useState('');
            useEffect(() => {
                setDisplayedText('');
                if (text) {
                    let i = 0;
                    const intervalId = setInterval(() => {
                        if (i < text.length) {
                            setDisplayedText(prev => prev + text.charAt(i));
                            i++;
                        } else {
                            clearInterval(intervalId);
                        }
                    }, speed);
                    return () => clearInterval(intervalId);
                }
            }, [text, speed]);
            return displayedText;
        };
        
        // --- Gemini Message Generator Component ---
        const MessageGenerator = () => {
            const [message, setMessage] = useState('');
            const [isLoading, setIsLoading] = useState(false);
            const [error, setError] = useState('');
            const displayedMessage = useTypingEffect(message);

            const generateMessage = useCallback(async () => {
                setIsLoading(true);
                setError('');
                setMessage('');
                const prompt = `Act as a loving mum's spirit talking to her son. He's from the UK, now in Brazil. Don't be over the top or religious. Be real, warm, and proud. He needs to hear it. Reference these key points: his ring, his insane grind and sacrifice (48-hour stretches), his impossible survival from an overdose ('the reset'), and the signs he's seen (444, the songs). Tell him you saw everything, that his love was the greatest gift, and that he's earned his peace. Keep it under 150 words. End with something like 'All my love, always.'`;
                try {
                    const chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
                    const payload = { contents: chatHistory };
                    const apiKey = ""; // Left empty as per instruction
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) throw new Error(`API error: ${response.statusText}`);

                    const result = await response.json();

                    if (result.candidates?.[0]?.content?.parts?.[0]?.text) {
                        setMessage(result.candidates[0].content.parts[0].text);
                    } else {
                        console.error("Unexpected API response:", result);
                        setError("Sorry, couldn't get a message through right now. Try again in a bit.");
                    }
                } catch (e) {
                    console.error(e);
                    setError("Sorry mate, something went wrong with the connection. Please try again later.");
                } finally {
                    setIsLoading(false);
                }
            }, []);

            return (
                <div className="w-full text-center">
                    <p className="mb-8 text-lg leading-relaxed text-gray-300">This whole story isn't a coincidence. It's a message. If you feel you need one more, just ask.</p>
                    <button onClick={generateMessage} disabled={isLoading} className="bg-amber-400/80 text-black font-bold font-sans py-3 px-8 rounded-lg shadow-lg shadow-amber-300/20 hover:bg-amber-300 transform hover:scale-105 transition-all duration-300 disabled:bg-gray-500 disabled:cursor-not-allowed animate-pulse-slow">
                        {isLoading ? "Connecting..." : "âœ¨ Get a Message"}
                    </button>
                    {isLoading && <div className="mt-8"><EyeOfHorusLoader /></div>}
                    {error && <p className="mt-8 text-red-400">{error}</p>}
                    {displayedMessage && (
                        <div className="mt-10 p-6 bg-black/30 rounded-lg border border-amber-300/20 min-h-[180px]">
                            <p className="text-lg whitespace-pre-wrap">{displayedMessage}</p>
                        </div>
                    )}
                </div>
            );
        };

        // --- Main App Component ---
        const App = () => {
            const [currentPage, setCurrentPage] = useState(0);
            const storyContainerRef = useRef(null);

            useEffect(() => {
                if (storyContainerRef.current) storyContainerRef.current.scrollTo(0, 0);
            }, [currentPage]);
            
            const currentChapter = storyChapters[currentPage];

            return (
                <div className="bg-black text-gray-200 min-h-screen flex flex-col items-center justify-center p-4 antialiased overflow-hidden relative">
                    <Starfield />
                    <div key={currentPage} ref={storyContainerRef} className="w-full max-w-2xl h-[90vh] bg-black/60 backdrop-blur-md rounded-2xl shadow-2xl shadow-amber-300/10 flex flex-col z-10 border border-amber-300/10 animate-fade-in story-container overflow-y-auto">
                        <div className="flex-grow p-8 md:p-12 flex flex-col items-center text-center">
                            <div className="mb-6 h-24 w-32 flex items-center justify-center">
                                {currentChapter.image ? (
                                    <img src={currentChapter.image} alt={currentChapter.alt || "Story image"} className="w-32 h-32 object-cover rounded-full shadow-lg border-2 border-amber-300/50" />
                                ) : (
                                    currentChapter.icon
                                )}
                            </div>
                            
                            <h1 className="text-3xl font-bold text-amber-300 tracking-wider mb-6 font-sans">{currentChapter.title}</h1>
                            
                            <div className="text-lg leading-relaxed space-y-6 text-gray-300">
                                {currentChapter.body && currentChapter.body.map((p, i) => <p key={i} className="font-sans">{p}</p>)}
                                
                                {currentChapter.type === 'gallery' && (
                                    <div className="grid grid-cols-1 sm:grid-cols-3 gap-2 mt-6">
                                        {currentChapter.images.map((img, i) => (
                                            <img key={i} src={img.src} alt={img.alt} className="rounded-lg shadow-lg w-full h-auto object-cover border-2 border-amber-300/20" />
                                        ))}
                                    </div>
                                )}

                                {currentChapter.type === 'interactive' && <MessageGenerator />}
                            </div>
                        </div>

                        <div className="p-6 mt-auto sticky bottom-0 bg-black/40 backdrop-blur-sm">
                            <div className="text-center text-amber-300/70 mb-4 text-sm font-sans">{currentPage + 1} / {storyChapters.length}</div>
                            {currentPage < storyChapters.length - 1 ? (
                                <button onClick={() => setCurrentPage(p => p + 1)} className="w-full bg-gray-700/80 text-amber-300 font-bold py-3 px-6 rounded-lg shadow-lg hover:bg-gray-600/80 transition-all font-sans">Next Chapter</button>
                            ) : (
                                <button onClick={() => setCurrentPage(0)} className="w-full bg-amber-300 text-black font-bold py-3 px-6 rounded-lg shadow-lg hover:bg-amber-200 transition-all font-sans">Read Again</button>
                            )}
                        </div>
                    </div>
                    <footer className="text-center mt-4 text-gray-500 text-sm z-10 font-sans">This story is real.</footer>
                </div>
            );
        };

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<App />);
    </script>
</body>
</html>
